// function testingScope(escopo) {
//     if (escopo === true) {
//         var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//         ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
//         console.log(ifScope);
//     } else {
//         var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//         console.log(elseScope);
//     }
//     console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
// }

// testingScope(true);

// Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
// - Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function .
// - Modifique as concatena√ß√µes para template literals.
const testingScope = escopo => {
  if(escopo === true){
    let ifScope = "N√£o devo ser utilizada fora do meu escopo (if)";
    ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`
    return console.log(ifScope);
  } else {
    let elseScope = "N√£o devo ser utilizada fora do meu escopo (else)"
    return console.log(elseScope);
  }
}
testingScope(true);

// Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort() . Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
// Copie o c√≥digo abaixo.

const oddsAndEvens = [13, 3, 4, 11, 7, 2];

// Seu c√≥digo aqui.
const ascendingOrder = oddsAndEvens.sort((a, b) => a - b);

console.log(ascendingOrder);

// ser√° necess√°rio alterar essa linha üòâ